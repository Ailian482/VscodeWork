				查询缓存				出发城市缓存				到达城市缓存
国内机票	Tokenflight-home	innerdeparture_cache_tag	 	innerarrival_cache_tag
国际机票	Tokenflight-home	intdeparture_cache_tag			intarrival_cache_tag
国内酒店	hotel-home-search	city_cache_tag						无
国际酒店          无	    	 int-history-city					无
火车票            无			 elected_departure_station		selected_arrival_station

国内机票查询缓存: Tokenflight-home
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");
// 添加
  //const request = objectStore.add([{code:"422",name:"深圳2",id:"2222",}], "city_cache_tag");
 // 更改
 const tagName= "597001477801775104flight-home"  

  const request = objectStore.get(tagName 
  );
  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return
    let {departureAirport,arrivalAirport} = res
  
    departureAirport.cityCode = departureAirport.cityCode+"2"
    departureAirport.cityName = departureAirport.cityName+"2"

    arrivalAirport.cityCode = arrivalAirport.cityCode+"2"
    arrivalAirport.cityName = arrivalAirport.cityName+"2"

    console.log({...res,departureAirport,arrivalAirport})
    objectStore.put({...res,departureAirport,arrivalAirport},tagName)  
  }
}

国际机票查询缓存：
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");
// 添加
  //const request = objectStore.add([{code:"422",name:"深圳2",id:"2222",}], "city_cache_tag");
 // 更改
 const tagName= "597001477801775104flight-home"  

  const request = objectStore.get(tagName 
  );
  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return
    let {departureAirport,arrivalAirport} = res
  
    departureAirport.cityCode = departureAirport.cityCode+"2"
    departureAirport.cityName = departureAirport.cityName+"2"

    arrivalAirport.cityCode = arrivalAirport.cityCode+"2"
    arrivalAirport.cityName = arrivalAirport.cityName+"2"

    console.log({...res,departureAirport,arrivalAirport})
    objectStore.put({...res,departureAirport,arrivalAirport},tagName)  
  }
}

国内机票更改历史列表: innerdeparture_cache_tag  innerarrival_cache_tag
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");

  // 到达城市
 const tagName= "innerarrival_cache_tag"  
 // 出发城市
//  const tagName= "innerdeparture_cache_tag"  

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return
    
    res.forEach(item=>{
      item.cityName += '2'
      item.cityCode += '2'
    })
    
    objectStore.put(res,tagName) 
  }
}

国际机票更改历史列表: intdeparture_cache_tag、 intarrival_cache_tag
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");

  // 到达城市
 const tagName= "intarrival_cache_tag"  
 // 出发城市
//  const tagName= "innerdeparture_cache_tag"  

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return
    
    res.forEach(item=>{
      item.cityName += '2'
      item.cityCode += '2'
    })
    
    objectStore.put(res,tagName) 
  }
}

国内酒店查询缓存: hotel-home-search
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");

  // 到达城市,{userId} 替换成当前登录的用户id
 const tagName= "hotel-home-search-597001477801775104"

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return
    
    res.city.code += "2"
    res.city.name += "2"
    
    objectStore.put(res,tagName) 
  }
}

更改国内酒店历史列表: city_cache_tag
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");

  
 const tagName= "city_cache_tag"

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return

    res.forEach(item=>{
      item.code += "2"
      item.name += "2"
    })
    objectStore.put(res,tagName) 
  }
}

更改国际酒店历史列表缓存: int-history-city
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");

  
 const tagName= "int-history-city"

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return

    res.forEach(item=>{
      item.cityCode += "2"
      item.cityNameCn += "2"
    })
    objectStore.put(res,tagName) 
  }
}

更改火车票历史列表缓存: elected_departure_station、 selected_arrival_station
let connection = indexedDB.open("_ionicstorage", 2);
connection.onsuccess = e => {
  const database = e.target.result;
  const transaction = database.transaction("_ionickv", "readwrite");
  const objectStore = transaction.objectStore("_ionickv");


// const tagName= "selected_departure_station" 
 const tagName= "selected_arrival_station"

 const request = objectStore.get(tagName);

  request.onsuccess = e => {
    const res = e.target.result
    if(!res) return

    res.forEach(item=>{
      item.code += "2"
      item.name += "2"
    })
    objectStore.put(res,tagName) 
  }
}